function window_demons(F, M, opts)
    if nargin<3;                         opts               = struct();     end
    if ~isfield(opts,'window_size');     opts.window        = 4;            end
    if ~isfield(opts,'stride');          opts.stride        = 2;            end
    if ~isfield(opts,'alpha');           opts.alpha         = 0.4;          end
    if ~isfield(opts,'sigma_fluid');     opts.sigma_fluid   = 1.0;          end
    if ~isfield(opts,'sigma_diff');      opts.sigma_diff    = 1.0;          end
    if ~isfield(opts,'lambda');          opts.lambda        = 1.0;          end
    if ~isfield(opts,'step');            opts.step          = 1.0;          end
    if ~isfield(opts,'epsilon');         opts.epsilon       = 10;           end
    if ~isfield(opts,'compositive');     opts.compositive   = 0;            end
    if ~isfield(opts,'max_iter');        opts.max_iter      = 500;          end
    if ~isfield(opts,'max_epochs');      opts.max_epochs    = 100;          end
    if ~isfield(opts,'plot');            opts.plot          = 0;            end
    
    num_cols    = size(F, 2);
    num_frames  = ceil((num_cols - opts.window)/opts.stride) + 1;
    padding     = (num_frames - 1)*opts.stride + opts.window - num_cols;

    F = [F zeros(size(F,1),padding)];
    M = [M zeros(size(M,1),padding)];

    fdf = cell(num_frames,2);

    for frame = 1:num_frames
        fdf{frame,1} = zeros(size(F));
        fdf{frame,2} = zeros(size(F));
    end

    sdf = cell(num_frames,2);

    for frame = 1:num_frames
        sdf{frame,1} = zeros(size(F));
        sdf{frame,2} = zeros(size(F));
    end

    while(counter<max_epochs)
        cur_frame = 1;

        for start_indices = 1:opts.stride:num_cols - opts.
            
            F_tilda = zeros(size(F));
            F_tilda(:, start_indices:start_indices+opts.window-1) = ...
                        F(:, start_indices:start_indices+opts.window-1);
            
            M_tilda = zeros(size(M));
            M_tilda(:, start_indices:start_indices+opts.window-1) = ...
                        M(:, start_indices:start_indices+opts.window-1);
            
            [G_fix_x, G_fix_y] = imgradientxy(F_tilda, 'central');
            [G_fix_mag, ~] = imgradient(G_fix_x, G_fix_y);

            num_iter = 1;

            current_moved = imwarp(M_tilda, ...
                cat(3,fdf{cur_frame,1},fdf{cur_frame,2}));

            for num_iter < opts.max_iter

                [G_mov_x, G_mov_y] = imgradientxy(M_tilda, 'central');
                [G_mov_mag, ~] = imgradient(G_mov_x, G_mov_y);

                I_diff = current_moved - F_tilda;
                normzf = opts.alpha.^2 * I_diff.^2 + G_fix_mag.^2 + opts.lambda^2;
                normzm = opts.alpha.^2 * I_diff.^2 + G_mov_mag.^2 + opts.lambda^2;

                if cur_frame>1
                    u_x = -1 * ((I_diff.*G_fix_x ...
                        + (opts.lambda^2)*sdf{cur_frame-1,1})./normzf ...
                        + (I_diff.*G_mov_x ...
                        + (opts.lambda^2)*sdf{cur_frame-1,1})./normzm);

                    u_y = -1 * ((I_diff.*G_fix_y ...
                        + (opts.lambda^2)*sdf{cur_frame-1,2})./normzf ...
                        + (I_diff.*G_mov_y ...
                        + (opts.lambda^2)*sdf{cur_frame-1,2})./normzm); 

                else
                    u_x = -1 * ((I_diff.*G_fix_x)./normzf ...
                        + (I_diff.*G_mov_x)./normzm);

                    u_y = -1 * ((I_diff.*G_fix_y)./normzf ...
                        + (I_diff.*G_mov_y)./normzm);

                u_x(isnan(u_x)) = 0;
                u_y(isnan(u_y)) = 0;

                sdf{cur_frame,1} = imgaussfilt(u_x, opts.sigma_fluid);
                sdf{cur_frame,2} = imgaussfilt(u_y, opts.sigma_fluid);

                fdf{cur_frame,1} = imgaussfilt(fdf{cur_frame,1} + u_x, ...
                                    opts.sigma_diff);
                fdf{cur_frame,2} = imgaussfilt(fdf{cur_frame,2} + u_y, ...
                                    opts.sigma_diff);
            end
        end    
    end
end