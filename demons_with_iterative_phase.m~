clear all
clc

N=512;
wshift=128;
Q=N/wshift;

W = hann(N);
S = hann(N);

%% For DTW
r = 512;
w = 0.025;
s = 0.010;
top = 3;

%% Get the wav file in
target = 'angry.wav'; % please provide a test file  or Target
[x_tar,fs] = audioread(target);

source = 'neutral.wav'; % please provide a test file  or Source
[x_src,fs] = audioread(source);

[x_src, x_tar] = get_alignment(x_src,x_tar,fs,w,w-s,r,top);

if size(x_src,2)>1, fprintf('This code only handles single channel files\n'); return; end
if size(x_tar,2)>1, fprintf('This code only handles single channel files\n'); return; end

fprintf(1,'Processing file: %s (length: %.2f s)\n',source,length(x_src)/fs);
fprintf(1,'Processing file: %s (length: %.2f s)\n',target,length(x_tar)/fs);

X_tar = stft(x_tar,N,wshift,W);
Xpow_tar = sum(abs(X_tar(:)).^2);

tmp_tar = stft(istft(abs(X_tar),wshift,S),N,wshift,W)-X_tar; % difference between temporary signal (zero phase) spectrogram and actual signal spectrogram 
C = 10*log10(Xpow_tar / sum(abs(tmp_tar(:)).^2));
fprintf(1,'Abs(X)          : %5.2f dB\n',C);

X_src = stft(x_src,N,wshift,W);
Xpow_src = sum(abs(X_src(:)).^2);

tmp_src = stft(istft(abs(X_src),wshift,S),N,wshift,W)-X_src; % difference between temporary signal (zero phase) spectrogram and actual signal spectrogram 
C = 10*log10(Xpow_src / sum(abs(tmp_src(:)).^2));
fprintf(1,'Abs(X)          : %5.2f dB\n',C);

%% Perform Demons Registration

X0_tar = abs(X_tar);
X0_src = abs(X_src);

opts = struct();
opts.alpha = 0.4;
opts.sigma_fluid = 0.7;
opts.sigma_diff = 1.5;
opts.step = 1.0;
opts.max_iter = 500;
opts.pyramid_levels  = 2;
opts.compositive = 1;
opts.diffeomorphism = 1;

disp_field = my_multires_demons(log(1 + X0_tar),log(1 + X0_src),opts);
warped_mag = imwarp(log(1 + abs(X_src)),disp_field);
warped_phase = imwarp(log(1 + angle(X_src)),disp_field);
est_signal_diffeo = get_signal_iteratively(warped_mag.*exp(1j*warped_phase), N, wshift, 1000);
figure()
lim = [1 1; size(warped_mag,1) size(warped_mag,2)];
subplot(131), imshow(warped_mag,[]), colormap(jet), subplot(132), ...
    showgrid(squeeze(disp_field(:,:,1)),squeeze(disp_field(:,:,2)),4,lim),...
    subplot(133), showvector(squeeze(disp_field(:,:,1)),squeeze(disp_field(:,:,2)),5);


% if do_diffeomorphic
%     disp_field = my_diffeomorphism(log(1 + X0_tar),log(1 + X0_src),opts);
%     warped_mag = imwarp(log(1 + abs(X_src)),disp_field);
%     warped_phase = imwarp(log(1 + angle(X_src)),disp_field);
%     est_signal_diffeo = get_signal_iteratively(warped_mag.*exp(1j*warped_phase), N, wshift, 1000);
%     figure()
%     lim = [1 1; size(warped_mag,1) size(warped_mag,2)];
%     subplot(131), imshow(warped_mag,[]), colormap(jet), subplot(132), ...
%         showgrid(squeeze(disp_field(:,:,1)),squeeze(disp_field(:,:,2)),4,lim),...
%         subplot(133), showvector(squeeze(disp_field(:,:,1)),squeeze(disp_field(:,:,2)),5);
% else
%     disp_field = my_demons(log(1 + X0_tar),log(1 + X0_src),opts);
%     warped_mag = imwarp(log(1 + abs(X_src)),disp_field);
%     warped_phase = imwarp(angle(X_src),disp_field);
%     est_signal_demon = get_signal_iteratively(warped_mag.*exp(1j*warped_phase), N, wshift, 1000);
%     figure()
%     lim = [1 1; size(warped_mag,1) size(warped_mag,2)];
%     subplot(131), imshow(warped_mag,[]), colormap(jet), subplot(132), ...
%         showgrid(squeeze(disp_field(:,:,1)),squeeze(disp_field(:,:,2)),4,lim), subplot(133), ...
%         showvector(squeeze(disp_field(:,:,1)),squeeze(disp_field(:,:,2)),5);
% end